/*
 * Copyright 1999,2004 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'java-library-distribution'
apply plugin: 'maven'
 
archivesBaseName = 'webdav-servlet'
project.group = 'net.sf.webdav-servlet'
project.version = '2.2-TOPICUS-SNAPSHOT'

sourceCompatibility = 1.6
targetCompatibility = 1.6

defaultTasks 'clean', 'build', 'sourcesJar', 'javadocJar', 'uploadArchives'

configurations {
	deployerJars
	providedCompile
}

repositories {
	mavenCentral()
}

dependencies {
	providedCompile group: 'javax.servlet', name: 'servlet-api', version: '2.5'
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
	
	testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.12'
	testCompile group: 'junit', name: 'junit', version: '4.+'
	testCompile group: 'org.jmock', name: 'jmock', version: '2.6.0'
	testCompile group: 'org.jmock', name: 'jmock-junit4', version: '2.6.0'

	testCompile group: 'org.springframework', name: 'spring-test', version: '3.2.2.RELEASE'
	testCompile group: 'org.springframework', name: 'spring-core', version: '3.2.2.RELEASE'
	
	testRuntime group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.1.3'
	
	deployerJars 'org.apache.maven.wagon:wagon-http:2.2'
}

sourceSets {
    main.compileClasspath += configurations.providedCompile
    test.compileClasspath += configurations.providedCompile
    test.runtimeClasspath += configurations.providedCompile
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.5'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task myJavadocs(type: Javadoc) {
  source = sourceSets.main.allJava
  classpath = sourceSets.main.compileClasspath + configurations.providedCompile
}

task javadocJar(type: Jar, dependsOn: myJavadocs) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test {
  include '**/*Test.class'
  exclude '**/net/sf/webdav/testutil/**/*Test.class'  
}

distributions {
    main{
        baseName = "$archivesBaseName-${project.version}"
    }
}

def getMavenSettingsCredentials = {
    String userHome = System.getProperty( "user.home" );
    File mavenSettings = new File(userHome, ".m2/settings.xml")
    def xmlSlurper = new XmlSlurper()
    def output = xmlSlurper.parse(mavenSettings)
    return output."servers"."server"
}

def getCredentials = {
    def entries = getMavenSettingsCredentials()
    for (entry in entries) {
        if ( entry."id".text() == "deployment.external" ) {
            return [username: entry.username.text(), password: entry.password.text()]
    }
  }
}

uploadArchives {
	def creds = getCredentials()
	repositories {
		repositories.mavenDeployer {
			configuration = configurations.deployerJars
			uniqueVersion = false
			configureAuth = {
				authentication(userName: creds["username"], password: creds["password"])
			}
			snapshotRepository(url: "http://vaatwasser:8081/nexus/content/repositories/external-snapshot/", configureAuth)
			repository(url: "http://vaatwasser:8081/nexus/content/repositories/external-releases/", configureAuth)
		}
	}
}